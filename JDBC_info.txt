
### Connecting with DriverManager Class

	<code>
		// For example: jdbc:mysql://localhost:3306/
		Connection conn = DriverManager.getConnection("jdbc:" + this.dbms + 
													  "://" + this.serverName +
                   									  ":" + this.portNumber + 
                   									  "/", connectionProps);
	</code>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

### Connecting with DataSource Objects

Advantage: no longer have to hard code the driver name or JDBC URL in their applications, 
			which makes them more portable.
			
# Using DataSource Objects to Get a Connection

	<code>
		DataSource ds = new MysqlDataSource();
    	ds.getConnection();
    </code>
   
    
# Creating Instance of DataSource Class and Setting its Properties

	<code>
		com.dbaccess.BasicDataSource ds = new com.dbaccess.BasicDataSource();
		ds.setServerName("grinder");
		ds.setDatabaseName("CUSTOMER_ACCOUNTS");
		ds.setDescription("Customer accounts database for billing");
	</code>

	
# Registering DataSource Object with Naming Service That Uses JNDI API

	<code>
		Context ctx = new InitialContext();
		ctx.bind("jdbc/billingDB", ds);			// Bind
		
		Context ctx = new InitialContext();
		DataSource ds = (DataSource)ctx.lookup("jdbc/billingDB");			// Use
	</code>
	
# Configure connection pool

    // Define
	<code>
		com.dbaccess.ConnectionPoolDS cpds = new com.dbaccess.ConnectionPoolDS();
		cpds.setServerName("creamer");
		cpds.setDatabaseName("COFFEEBREAK");
		cpds.setPortNumber(9040);
		cpds.setDescription("Connection pooling for " + "COFFEEBREAK DBMS");
		
		Context ctx = new InitialContext();
		ctx.bind("jdbc/pool/fastCoffeeDB", cpds);

		com.applogic.PooledDataSource ds = new com.applogic.PooledDataSource();
		ds.setDescription("produces pooled connections to COFFEEBREAK");
		ds.setDataSourceName("jdbc/pool/fastCoffeeDB");
		Context ctx = new InitialContext();
		ctx.bind("jdbc/fastCoffeeDB", ds);
	</code>
	
	//Use
	<code>
		ctx = new InitialContext();
		ds = (DataSource)ctx.lookup("jdbc/fastCoffeeDB");
	</code>
	
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

### Deploying Distributed Transactions

A distributed transaction is a transaction that accesses and updates data on two or more networked resources.

	// Define
	<code>
		com.dbaccess.XATransactionalDS xads = new com.dbaccess.XATransactionalDS();
		xads.setServerName("creamer");
		xads.setDatabaseName("COFFEEBREAK");
		xads.setPortNumber(9040);
		xads.setDescription("Distributed transactions for COFFEEBREAK DBMS");
		
		Context ctx = new InitialContext();
		ctx.bind("jdbc/xa/distCoffeeDB", xads);
		
		com.applogic.TransactionalDS ds = new com.applogic.TransactionalDS();
		ds.setDescription("Produces distributed transaction connections to COFFEEBREAK");
		ds.setDataSourceName("jdbc/xa/distCoffeeDB");
		Context ctx = new InitialContext();
		ctx.bind("jdbc/distCoffeeDB", ds);
	</code>
	
	//Use
	<code>
		Context ctx = new InitialContext();
		DataSource ds = (DataSource)ctx.lookup("jdbc/distCoffeesDB");
		Connection con = ds.getConnection();
	</code>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

### ResultSet Interface

# ResultSet Types
	TYPE_FORWARD_ONLY [default] 	from first to last
	TYPE_SCROLL_INSENSITIVE 		can be scrolled
	TYPE_SCROLL_SENSITIVE 
	
# ResultSet Concurrency
	CONCUR_READ_ONLY				The ResultSet object cannot be updated using the ResultSet interface.
	CONCUR_UPDATABLE				The ResultSet object can be updated using the ResultSet interface.
	
# Cursor Holdability
	HOLD_CURSORS_OVER_COMMIT
	CLOSE_CURSORS_AT_COMMIT
	
# Using Statement Objects for Batch Updates
	
	<code>
		stmt = this.con.createStatement();
        stmt.addBatch(...);
        int [] updateCounts = stmt.executeBatch();
        this.con.commit();
	</code>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	

### Prepared Statements

Has been precompiled, so can be executed RDBM.

	<code>
		String updateString = "update " + dbName + ".COFFEES " + "set SALES = ? where COF_NAME = ?";
		updateSales = con.prepareStatement(updateString);
		
		updateSales.setInt(1, 100);
		...
		updateSales.executeUpdate();
	</code>
	